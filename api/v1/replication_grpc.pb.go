// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.31.1
// source: api/v1/replication.proto

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReplicationServiceClient is the client API for ReplicationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReplicationServiceClient interface {
	// StreamWAL allows a follower to stream WAL entries from a leader.
	// The stream will block and wait for new entries if the follower is caught up.
	StreamWAL(ctx context.Context, in *StreamWALRequest, opts ...grpc.CallOption) (ReplicationService_StreamWALClient, error)
	// GetLatestState returns the latest sequence number and WAL segment index from the leader.
	// This is used by a follower to determine its replication lag.
	GetLatestState(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LatestStateResponse, error)
	// GetSnapshot allows a follower to bootstrap by receiving a full snapshot of the database.
	GetSnapshot(ctx context.Context, in *SnapshotRequest, opts ...grpc.CallOption) (ReplicationService_GetSnapshotClient, error)
	// ReportProgress allows a follower to report its latest applied sequence number to the leader.
	// This is used for synchronous replication to unblock waiting client writes.
	ReportProgress(ctx context.Context, in *ReportProgressRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type replicationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReplicationServiceClient(cc grpc.ClientConnInterface) ReplicationServiceClient {
	return &replicationServiceClient{cc}
}

func (c *replicationServiceClient) StreamWAL(ctx context.Context, in *StreamWALRequest, opts ...grpc.CallOption) (ReplicationService_StreamWALClient, error) {
	stream, err := c.cc.NewStream(ctx, &ReplicationService_ServiceDesc.Streams[0], "/nexusbase.api.v1.ReplicationService/StreamWAL", opts...)
	if err != nil {
		return nil, err
	}
	x := &replicationServiceStreamWALClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ReplicationService_StreamWALClient interface {
	Recv() (*WALEntry, error)
	grpc.ClientStream
}

type replicationServiceStreamWALClient struct {
	grpc.ClientStream
}

func (x *replicationServiceStreamWALClient) Recv() (*WALEntry, error) {
	m := new(WALEntry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *replicationServiceClient) GetLatestState(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LatestStateResponse, error) {
	out := new(LatestStateResponse)
	err := c.cc.Invoke(ctx, "/nexusbase.api.v1.ReplicationService/GetLatestState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicationServiceClient) GetSnapshot(ctx context.Context, in *SnapshotRequest, opts ...grpc.CallOption) (ReplicationService_GetSnapshotClient, error) {
	stream, err := c.cc.NewStream(ctx, &ReplicationService_ServiceDesc.Streams[1], "/nexusbase.api.v1.ReplicationService/GetSnapshot", opts...)
	if err != nil {
		return nil, err
	}
	x := &replicationServiceGetSnapshotClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ReplicationService_GetSnapshotClient interface {
	Recv() (*SnapshotChunk, error)
	grpc.ClientStream
}

type replicationServiceGetSnapshotClient struct {
	grpc.ClientStream
}

func (x *replicationServiceGetSnapshotClient) Recv() (*SnapshotChunk, error) {
	m := new(SnapshotChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *replicationServiceClient) ReportProgress(ctx context.Context, in *ReportProgressRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/nexusbase.api.v1.ReplicationService/ReportProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReplicationServiceServer is the server API for ReplicationService service.
// All implementations must embed UnimplementedReplicationServiceServer
// for forward compatibility
type ReplicationServiceServer interface {
	// StreamWAL allows a follower to stream WAL entries from a leader.
	// The stream will block and wait for new entries if the follower is caught up.
	StreamWAL(*StreamWALRequest, ReplicationService_StreamWALServer) error
	// GetLatestState returns the latest sequence number and WAL segment index from the leader.
	// This is used by a follower to determine its replication lag.
	GetLatestState(context.Context, *emptypb.Empty) (*LatestStateResponse, error)
	// GetSnapshot allows a follower to bootstrap by receiving a full snapshot of the database.
	GetSnapshot(*SnapshotRequest, ReplicationService_GetSnapshotServer) error
	// ReportProgress allows a follower to report its latest applied sequence number to the leader.
	// This is used for synchronous replication to unblock waiting client writes.
	ReportProgress(context.Context, *ReportProgressRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedReplicationServiceServer()
}

// UnimplementedReplicationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReplicationServiceServer struct {
}

func (UnimplementedReplicationServiceServer) StreamWAL(*StreamWALRequest, ReplicationService_StreamWALServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamWAL not implemented")
}
func (UnimplementedReplicationServiceServer) GetLatestState(context.Context, *emptypb.Empty) (*LatestStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestState not implemented")
}
func (UnimplementedReplicationServiceServer) GetSnapshot(*SnapshotRequest, ReplicationService_GetSnapshotServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSnapshot not implemented")
}
func (UnimplementedReplicationServiceServer) ReportProgress(context.Context, *ReportProgressRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportProgress not implemented")
}
func (UnimplementedReplicationServiceServer) mustEmbedUnimplementedReplicationServiceServer() {}

// UnsafeReplicationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReplicationServiceServer will
// result in compilation errors.
type UnsafeReplicationServiceServer interface {
	mustEmbedUnimplementedReplicationServiceServer()
}

func RegisterReplicationServiceServer(s grpc.ServiceRegistrar, srv ReplicationServiceServer) {
	s.RegisterService(&ReplicationService_ServiceDesc, srv)
}

func _ReplicationService_StreamWAL_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamWALRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReplicationServiceServer).StreamWAL(m, &replicationServiceStreamWALServer{stream})
}

type ReplicationService_StreamWALServer interface {
	Send(*WALEntry) error
	grpc.ServerStream
}

type replicationServiceStreamWALServer struct {
	grpc.ServerStream
}

func (x *replicationServiceStreamWALServer) Send(m *WALEntry) error {
	return x.ServerStream.SendMsg(m)
}

func _ReplicationService_GetLatestState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServiceServer).GetLatestState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nexusbase.api.v1.ReplicationService/GetLatestState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServiceServer).GetLatestState(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicationService_GetSnapshot_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SnapshotRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReplicationServiceServer).GetSnapshot(m, &replicationServiceGetSnapshotServer{stream})
}

type ReplicationService_GetSnapshotServer interface {
	Send(*SnapshotChunk) error
	grpc.ServerStream
}

type replicationServiceGetSnapshotServer struct {
	grpc.ServerStream
}

func (x *replicationServiceGetSnapshotServer) Send(m *SnapshotChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _ReplicationService_ReportProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServiceServer).ReportProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nexusbase.api.v1.ReplicationService/ReportProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServiceServer).ReportProgress(ctx, req.(*ReportProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReplicationService_ServiceDesc is the grpc.ServiceDesc for ReplicationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReplicationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nexusbase.api.v1.ReplicationService",
	HandlerType: (*ReplicationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLatestState",
			Handler:    _ReplicationService_GetLatestState_Handler,
		},
		{
			MethodName: "ReportProgress",
			Handler:    _ReplicationService_ReportProgress_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamWAL",
			Handler:       _ReplicationService_StreamWAL_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetSnapshot",
			Handler:       _ReplicationService_GetSnapshot_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1/replication.proto",
}
